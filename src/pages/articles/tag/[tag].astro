---
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';
import BaseHead from '../../../components/BaseHead.astro';
import Footer from '../../../components/Footer.astro';
import FormattedDate from '../../../components/FormattedDate.astro';
import Header from '../../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../../consts';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	const tags = [...new Set(posts.flatMap(post => post.data.tags))] as string[];
	
	return tags.map((tag) => ({
		params: { tag: tag.toLowerCase().replace(/\s+/g, '-') },
		props: { tag, posts }
	}));
}

const { tag, posts } = Astro.props;
const tagName = tag as string;
const filteredPosts = (posts as any[]).filter(post => 
	post.data.tags.includes(tagName)
).sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const generateRandomGradient = () => {
  const colors = [
	"ff9a9e",
	"fad0c4",
	"fbc2eb",
	"a18cd1",
	"fbc7aa",
	"ffdde1",
	"96e6a1",
	"4bc0c8",
	"43cea2",
	"185a9d",
  ];
  const from =
	colors[Math.floor(Math.random() * colors.length)];
  let to = colors[Math.floor(Math.random() * colors.length)];
  while (to === from) {
	to = colors[Math.floor(Math.random() * colors.length)];
  }
  return { from, to };
};
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`"${tagName}" Tag - ${SITE_TITLE}`} description={`${SITE_DESCRIPTION} - Articles tagged with "${tagName}"`} />
	</head>
	<body>
		<Header />
		<main class="w-full py-12">
			<!-- Hero Section -->
			<section class="text-center mb-16 px-4">
				<h1 class="text-4xl md:text-5xl font-bold text-brand-black mb-6">
					Articles tagged with
				</h1>
				<div class="inline-block px-4 py-2 text-sm font-medium bg-accent/10 text-accent rounded-full border border-accent/20 mb-4">
					#{tagName}
				</div>
				<p class="text-lg text-brand-gray max-w-2xl mx-auto leading-relaxed">
					{filteredPosts.length} article{filteredPosts.length !== 1 ? 's' : ''} found with this tag.
					Explore related content and insights.
				</p>
				<div class="w-24 h-1 bg-accent mx-auto mt-8 rounded-full"></div>
			</section>

			<!-- Breadcrumb -->
			<section class="mb-8 px-4">
				<nav class="flex items-center gap-2 text-sm text-brand-gray">
					<a href="/articles" class="hover:text-accent transition-colors duration-200">All Articles</a>
					<span class="text-brand-gray/50">‚Ä∫</span>
					<span class="text-accent font-medium">#{tagName}</span>
				</nav>
			</section>

			<!-- Articles Grid -->
			<section class="px-4">
				{filteredPosts.length > 0 ? (
					<div class="grid grid-cols-1 gap-8">
						{
							filteredPosts.map((post) => (
								<article class="group bg-white rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 ease-out hover:-translate-y-2 border border-brand-gray-light/20">
									<a href={`/articles/${post.id}/`} class="block h-full no-underline">
										<div class="relative overflow-hidden">
											<Image
												width={720}
												height={360}
												src={
													post.data.heroImage
														? post.data.heroImage.src
														: `https://via.assets.so/img.jpg?w=720&h=360&gradientFrom=${generateRandomGradient().from}&gradientTo=${generateRandomGradient().to}&gradientAngle=135&&text= &f=png`
												}
												alt={post.data.title}
												class="w-full h-48 object-cover transition-transform duration-300 group-hover:scale-105"
											/>
											<div class="absolute inset-0 bg-linear-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
										</div>
										<div class="p-6">
											<div class="mb-4">
												<h3 class="text-xl font-bold text-brand-black group-hover:text-accent transition-colors duration-200 leading-tight mb-3">
													{post.data.title}
												</h3>
												<p class="text-brand-gray text-sm leading-relaxed line-clamp-3">
													{post.data.description}
												</p>
											</div>

											{post.data.tags && post.data.tags.length > 0 && (
												<div class="flex flex-wrap gap-2 mb-4">
													{post.data.tags.slice(0, 3).map((tagItem: string) => (
														<span class="inline-block px-3 py-1 text-xs font-medium bg-accent/10 text-accent rounded-full border border-accent/20">
															{tagItem}
														</span>
													))}
													{post.data.tags.length > 3 && (
														<span class="inline-block px-3 py-1 text-xs font-medium bg-brand-gray-light text-brand-gray rounded-full">
															+{post.data.tags.length - 3}
														</span>
													)}
												</div>
											)}

											<div class="flex items-center justify-between text-sm text-brand-gray">
												<time class="font-medium" datetime={post.data.pubDate.toISOString()}>
													<FormattedDate date={post.data.pubDate} />
												</time>
												<span class="text-accent font-medium group-hover:translate-x-1 transition-transform duration-200">
													Read more ‚Üí
												</span>
											</div>
										</div>
									</a>
								</article>
							))
						}
					</div>
				) : (
					<div class="text-center py-16">
						<div class="text-6xl mb-4">üè∑Ô∏è</div>
						<h3 class="text-2xl font-bold text-brand-black mb-4">No articles found</h3>
						<p class="text-brand-gray mb-8">There are no articles tagged with "#{tagName}" yet.</p>
						<a href="/articles" class="inline-block px-6 py-3 bg-accent text-white rounded-lg font-medium hover:bg-accent-dark transition-colors duration-200">
							Browse All Articles
						</a>
					</div>
				)}
			</section>
		</main>
		<Footer />
	</body>
</html>